1.简单工厂模式

       简单工厂模式解决的问题是如何去实例化一个合适的对象。
       简单工厂模式的核心思想就是：有一个专门的类来负责创建实例的过程。
       具体来说，把产品看着是一系列的类的集合，这些类是由某个抽象类或者接口派生出来的一个对象树。而工厂类用来产生一个合适的对象来满足客户的要求。
       如果简单工厂模式所涉及到的具体产品之间没有共同的逻辑，那么我们就可以使用接口来扮演抽象产品的角色；如果具体产品之间有功能的逻辑或，
       我们就必须把这些共同的东西提取出来，放在一个抽象类中，然后让具体产品继承抽象类。为实现更好复用的目的，共同的东西总是应该抽象出来的。
 
      优点：工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。
      用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。
      
      缺点：由于工厂类集中了所有实例的创建逻辑，这就直接导致一旦这个工厂出了问题，所有的客户端都会受到牵连；
      而且由于简单工厂模式的产品室基于一个共同的抽象类或者接口，这样一来，但产品的种类增加的时候，即有不同的产品接口或者抽象类的时候，
      工厂类就需要判断何时创建何种种类的产品，这就和创建何种种类产品的产品相互混淆在了一起，违背了单一职责，导致系统丧失灵活性和可维护性。
      而且更重要的是，简单工厂模式违背了“开放封闭原则”，就是违背了“系统对扩展开放，对修改关闭”的原则，因为当我新增加一个产品的时候必须修改工厂类，
      相应的工厂类就需要重新编译一遍。
      
2.当一个方法被调用而且参数为两个以上，当使用其中一个参数时，最好判空处理，因为如果空指针，系统不会提示的很明确，找起来费劲

      private void switchFragment(Fragment fromFragment, Fragment toFragment) {}, 
                 //这是一个坑
                if (fromFragment != null) {
                    //隐藏之前的fragment
                    transaction.hide(fromFragment);
                }

3.单例模式之饿汉式和懒汉式

   懒汉式： 懒汉式如果在创建实例对象时不加上synchronized则会导致(在多线程中)对对象的访问不是线程安全的(不是同一个对象)，
   加上synchronized之后能保证多线程时对象是同一个,但是效率会下降                         
   public class SingleDemo {                                               
  private static SingleDemo s = null;  
    private SingleDemo(){}  
    public static synchronized  SingleDemo getInstance(){  
      s==null?new SingleDemo：s;
    } 
    
   饿汉式： 饿汉式是线程安全,在类创建的同时就已经创建好一个静态的对象供系统使用,以后不在改变（推荐）
   public class Singleton{ 
   public Singleton(){}
   private static Singleton singleton = new Singleton()；  //建立对象
     public static Singleton getInstance(){
     return singleton ；//直接返回单例对象    
     }

4.SimpleDateFormat 允许以为日期-时间格式化选择任何用户指定的方式启动。输出想要的时间格式类型

5.接口和抽象类有什么区别？

  抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。
  
  一个类只能继承一个类（抽象类）(正如人不可能同时是生物和非生物)，但是可以实现多个接口(吃饭接口、走路接口)。
  第一点． 接口是抽象类的变体，接口中所有的方法都是抽象的。而抽象类是包含抽象和非抽象的方法。
  第二点． 接口可以多继承，抽象类不行
  第三点． 接口中声明的变量默认都是final，抽象类可以包含非final的
  第四点． 接口中成员函数默认是public，抽象类的成员函数可以是private，protected，public
  当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。
